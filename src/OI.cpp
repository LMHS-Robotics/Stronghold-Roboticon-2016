// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommands/AutoLaunch.h"
#include "Commands/AutonomousCommands/AutoUltrasonicDrive.h"
#include "Commands/AutonomousCommands/AutonomousDriveForward.h"
#include "Commands/Flipper.h"
#include "Commands/Launch.h"
#include "Commands/TankDrive.h"
#include "Commands/IntakeDownCommand.h"
#include "Commands/IntakeUpCommand.h"
#include "Commands/AutonomousCommands/AutoDriveOverDefense.h"
#include "Commands/AutonomousCommands/LowBar.h"
#include "Commands/LockBall.h"
#include "Commands/UnlockBall.h"
#include "Commands/IntakeWheels.h"
#include "Commands/ShortDistance.h"
#include "Commands/LongDistance.h"
#include "Commands/IntakeWheelsReverse.h"

OI::OI() {
    // Process operator interface input here.
	//one drivers :

			    driveStick.reset(new Joystick(0));

			    //shootStick.reset(new Joystick(1));

			  	    rightTrig.reset(new JoystickAnalogButton(driveStick.get(), 3));
			  	    rightTrig->WhileActive(new IntakeUpCommand());

			  	    leftTrig.reset(new JoystickAnalogButton(driveStick.get(), 2));
			  	    leftTrig->WhileActive(new IntakeDownCommand());

			  	    //intakeUpButton.reset(new JoystickButton(driveStick.get(), 4));
			  	    //intakeUpButton->WhileHeld(new IntakeUpCommand());

			  	    //intakeDownButton.reset(new JoystickButton(driveStick.get(), 1));
			  	    //intakeDownButton->WhileHeld(new IntakeDownCommand());

			  	    intakeWheel.reset(new JoystickButton(driveStick.get(), 10));
			  	    intakeWheel->WhileHeld(new IntakeWheels());

			  	    intakeWheelReverse.reset(new JoystickButton(driveStick.get(), 9));
			  	    intakeWheelReverse->WhileHeld(new IntakeWheelsReverse());

			  	    launchBoulder.reset(new JoystickButton(driveStick.get(), 5));
			  	    launchBoulder->WhileHeld(new Launch());
//hi
			  	    fire.reset(new JoystickButton(driveStick.get(), 6));
			  		fire->WhenPressed(new Flipper());

			  		togButton = new JoystickButton(driveStick.get(), 1);
			  		togDistance = new ToggledPressedButtonScheduler(togButton->Grab(), togButton, new ShortDistance(), new LongDistance());
			  		togDistance->Start();

    // SmartDashboard Buttons
    SmartDashboard::PutData("AutoTurn", new AutoTurn());
    SmartDashboard::PutData("Low Bar", new LowBar());
    SmartDashboard::PutData("AutoLaunch", new AutoLaunch());
    SmartDashboard::PutData("AutoUltrasonicDriveToTower", new AutoDriveOverDefense());
    SmartDashboard::PutData("AutoUltrasonicDrive", new AutoUltrasonicDrive());
    SmartDashboard::PutData("AutonomousDriveForward", new AutonomousDriveForward());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriveStick() {
   return driveStick;
}

//std::shared_ptr<Joystick> OI::getShootStick() {
  // return shootStick;
//}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS


// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ROBOTMAP_H
#define ROBOTMAP_H
#include "WPILib.h"


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
class RobotMap {
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static std::shared_ptr<SpeedController> driveTrainfrontLeft;
	static std::shared_ptr<SpeedController> driveTrainfrontRight;
	static std::shared_ptr<SpeedController> driveTrainrearLeft;
	static std::shared_ptr<SpeedController> driveTrainrearRight;
	static std::shared_ptr<RobotDrive> driveTrainRobotDrive41;
	static std::shared_ptr<AnalogGyro> driveTrainspoopyGyro;
	static std::shared_ptr<Encoder> driveTrainRightEncoder;
	static std::shared_ptr<Encoder> driveTrainLeftEncoder;
	static std::shared_ptr<SpeedController> flipperSubflipperMotor;
	static std::shared_ptr<DigitalInput> flipperSublimitFipper;
	static std::shared_ptr<Encoder> launcherleftEncoder;
	static std::shared_ptr<Encoder> launcherrightEncoder;
	static std::shared_ptr<AnalogInput> launcherUltrasanic;
	static std::shared_ptr<CANTalon> launcherrightMotor;
	static std::shared_ptr<CANTalon> launcherleftMotor;
	static std::shared_ptr<SpeedController> boulderIntakeintakeUpandDown;
	static std::shared_ptr<SpeedController> boulderIntakeintakeBeltMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	//static std::shared_ptr<SpeedController> launcherrightMotor;
	//static std::shared_ptr<SpeedController> launcherleftMotor;


	static void init();
	static constexpr double TOP_TARGET_HEIGHT_INCHES = 95.25;
	static constexpr double CAMERA_HEIGHT_INCHES = 12.0;
	static constexpr double VERTICAL_FOV_DEG = 36.13;
	static constexpr double CAMERA_PITCH_DEG = 15;

	static constexpr double TANK_WHEEL_DIAMETER = 2.6;
	static constexpr double TANK_GEAR_RATIO = 10.71/1.00;//values for use in encoder and vision calculations

	static constexpr double FLYWHEEL_GEAR_RATIO = 56/45;
	static constexpr double FLYWHEEL_DIAMETER = 6;

	static constexpr double FUDGE_FACTOR = 1.0;
	static constexpr double PULSE_PER_REVOLUTION = 360;
	static constexpr double PI = 3.14159;
	static constexpr double POV_UP = 0;
	static constexpr double POV_RIGHT = 90;
	static constexpr double POV_DOWN = 180;
	static constexpr double POV_LEFT = 270;

};
#endif
